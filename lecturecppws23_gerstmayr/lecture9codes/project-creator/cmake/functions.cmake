function( showTargetProperties target)
  get_property( prop TARGET exe_c PROPERTY ADDITIONAL_CLEAN_FILES )
  if( prop )
      message( "ADDITIONAL_CLEAN_FILES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ALIASED_TARGET )
  if( prop )
      message( "ALIASED_TARGET -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_ANT_ADDITIONAL_OPTIONS )
  if( prop )
      message( "ANDROID_ANT_ADDITIONAL_OPTIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_API )
  if( prop )
      message( "ANDROID_API -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_API_MIN )
  if( prop )
      message( "ANDROID_API_MIN -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_ARCH )
  if( prop )
      message( "ANDROID_ARCH -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_ASSETS_DIRECTORIES )
  if( prop )
      message( "ANDROID_ASSETS_DIRECTORIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_GUI )
  if( prop )
      message( "ANDROID_GUI -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_JAR_DEPENDENCIES )
  if( prop )
      message( "ANDROID_JAR_DEPENDENCIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_JAR_DIRECTORIES )
  if( prop )
      message( "ANDROID_JAR_DIRECTORIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_JAVA_SOURCE_DIR )
  if( prop )
      message( "ANDROID_JAVA_SOURCE_DIR -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_NATIVE_LIB_DEPENDENCIES )
  if( prop )
      message( "ANDROID_NATIVE_LIB_DEPENDENCIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_NATIVE_LIB_DIRECTORIES )
  if( prop )
      message( "ANDROID_NATIVE_LIB_DIRECTORIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_PROCESS_MAX )
  if( prop )
      message( "ANDROID_PROCESS_MAX -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_PROGUARD )
  if( prop )
      message( "ANDROID_PROGUARD -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_PROGUARD_CONFIG_PATH )
  if( prop )
      message( "ANDROID_PROGUARD_CONFIG_PATH -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_SECURE_PROPS_PATH )
  if( prop )
      message( "ANDROID_SECURE_PROPS_PATH -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_SKIP_ANT_STEP )
  if( prop )
      message( "ANDROID_SKIP_ANT_STEP -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ANDROID_STL_TYPE )
  if( prop )
      message( "ANDROID_STL_TYPE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ARCHIVE_OUTPUT_DIRECTORY_<CONFIG> )
  if( prop )
      message( "ARCHIVE_OUTPUT_DIRECTORY_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ARCHIVE_OUTPUT_DIRECTORY )
  if( prop )
      message( "ARCHIVE_OUTPUT_DIRECTORY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ARCHIVE_OUTPUT_NAME_<CONFIG> )
  if( prop )
      message( "ARCHIVE_OUTPUT_NAME_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ARCHIVE_OUTPUT_NAME )
  if( prop )
      message( "ARCHIVE_OUTPUT_NAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOGEN_BUILD_DIR )
  if( prop )
      message( "AUTOGEN_BUILD_DIR -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOGEN_ORIGIN_DEPENDS )
  if( prop )
      message( "AUTOGEN_ORIGIN_DEPENDS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOGEN_PARALLEL )
  if( prop )
      message( "AUTOGEN_PARALLEL -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOGEN_TARGET_DEPENDS )
  if( prop )
      message( "AUTOGEN_TARGET_DEPENDS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOMOC_COMPILER_PREDEFINES )
  if( prop )
      message( "AUTOMOC_COMPILER_PREDEFINES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOMOC_DEPEND_FILTERS )
  if( prop )
      message( "AUTOMOC_DEPEND_FILTERS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOMOC_EXECUTABLE )
  if( prop )
      message( "AUTOMOC_EXECUTABLE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOMOC_MACRO_NAMES )
  if( prop )
      message( "AUTOMOC_MACRO_NAMES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOMOC_MOC_OPTIONS )
  if( prop )
      message( "AUTOMOC_MOC_OPTIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOMOC )
  if( prop )
      message( "AUTOMOC -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOUIC )
  if( prop )
      message( "AUTOUIC -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOUIC_EXECUTABLE )
  if( prop )
      message( "AUTOUIC_EXECUTABLE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOUIC_OPTIONS )
  if( prop )
      message( "AUTOUIC_OPTIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTOUIC_SEARCH_PATHS )
  if( prop )
      message( "AUTOUIC_SEARCH_PATHS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTORCC )
  if( prop )
      message( "AUTORCC -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTORCC_EXECUTABLE )
  if( prop )
      message( "AUTORCC_EXECUTABLE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY AUTORCC_OPTIONS )
  if( prop )
      message( "AUTORCC_OPTIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY BINARY_DIR )
  if( prop )
      message( "BINARY_DIR -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY BUILD_RPATH )
  if( prop )
      message( "BUILD_RPATH -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY BUILD_RPATH_USE_ORIGIN )
  if( prop )
      message( "BUILD_RPATH_USE_ORIGIN -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY BUILD_WITH_INSTALL_NAME_DIR )
  if( prop )
      message( "BUILD_WITH_INSTALL_NAME_DIR -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY BUILD_WITH_INSTALL_RPATH )
  if( prop )
      message( "BUILD_WITH_INSTALL_RPATH -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY BUNDLE_EXTENSION )
  if( prop )
      message( "BUNDLE_EXTENSION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY BUNDLE )
  if( prop )
      message( "BUNDLE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY C_EXTENSIONS )
  if( prop )
      message( "C_EXTENSIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY C_STANDARD )
  if( prop )
      message( "C_STANDARD -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY C_STANDARD_REQUIRED )
  if( prop )
      message( "C_STANDARD_REQUIRED -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMMON_LANGUAGE_RUNTIME )
  if( prop )
      message( "COMMON_LANGUAGE_RUNTIME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMPATIBLE_INTERFACE_BOOL )
  if( prop )
      message( "COMPATIBLE_INTERFACE_BOOL -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMPATIBLE_INTERFACE_NUMBER_MAX )
  if( prop )
      message( "COMPATIBLE_INTERFACE_NUMBER_MAX -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMPATIBLE_INTERFACE_NUMBER_MIN )
  if( prop )
      message( "COMPATIBLE_INTERFACE_NUMBER_MIN -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMPATIBLE_INTERFACE_STRING )
  if( prop )
      message( "COMPATIBLE_INTERFACE_STRING -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMPILE_DEFINITIONS )
  if( prop )
      message( "COMPILE_DEFINITIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMPILE_FEATURES )
  if( prop )
      message( "COMPILE_FEATURES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMPILE_FLAGS )
  if( prop )
      message( "COMPILE_FLAGS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMPILE_OPTIONS )
  if( prop )
      message( "COMPILE_OPTIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMPILE_PDB_NAME )
  if( prop )
      message( "COMPILE_PDB_NAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMPILE_PDB_NAME_<CONFIG> )
  if( prop )
      message( "COMPILE_PDB_NAME_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMPILE_PDB_OUTPUT_DIRECTORY )
  if( prop )
      message( "COMPILE_PDB_OUTPUT_DIRECTORY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG> )
  if( prop )
      message( "COMPILE_PDB_OUTPUT_DIRECTORY_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY <CONFIG>_OUTPUT_NAME )
  if( prop )
      message( "" ${pCONFIG -> rop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY <CONFIG>_POSTFIX )
  if( prop )
      message( "" ${pCONFIG -> rop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY CROSSCOMPILING_EMULATOR )
  if( prop )
      message( "CROSSCOMPILING_EMULATOR -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY CUDA_PTX_COMPILATION )
  if( prop )
      message( "CUDA_PTX_COMPILATION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY CUDA_SEPARABLE_COMPILATION )
  if( prop )
      message( "CUDA_SEPARABLE_COMPILATION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS )
  if( prop )
      message( "CUDA_RESOLVE_DEVICE_SYMBOLS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY CUDA_EXTENSIONS )
  if( prop )
      message( "CUDA_EXTENSIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY CUDA_STANDARD )
  if( prop )
      message( "CUDA_STANDARD -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY CUDA_STANDARD_REQUIRED )
  if( prop )
      message( "CUDA_STANDARD_REQUIRED -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY CXX_EXTENSIONS )
  if( prop )
      message( "CXX_EXTENSIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY CXX_STANDARD )
  if( prop )
      message( "CXX_STANDARD -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY CXX_STANDARD_REQUIRED )
  if( prop )
      message( "CXX_STANDARD_REQUIRED -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY DEBUG_POSTFIX )
  if( prop )
      message( "DEBUG_POSTFIX -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY DEFINE_SYMBOL )
  if( prop )
      message( "DEFINE_SYMBOL -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY DEPLOYMENT_REMOTE_DIRECTORY )
  if( prop )
      message( "DEPLOYMENT_REMOTE_DIRECTORY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY DEPLOYMENT_ADDITIONAL_FILES )
  if( prop )
      message( "DEPLOYMENT_ADDITIONAL_FILES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY DOTNET_TARGET_FRAMEWORK_VERSION )
  if( prop )
      message( "DOTNET_TARGET_FRAMEWORK_VERSION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY EchoString )
  if( prop )
      message( "EchoString -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY ENABLE_EXPORTS )
  if( prop )
      message( "ENABLE_EXPORTS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY EXCLUDE_FROM_ALL )
  if( prop )
      message( "EXCLUDE_FROM_ALL -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG> )
  if( prop )
      message( "EXCLUDE_FROM_DEFAULT_BUILD_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY EXCLUDE_FROM_DEFAULT_BUILD )
  if( prop )
      message( "EXCLUDE_FROM_DEFAULT_BUILD -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY EXPORT_NAME )
  if( prop )
      message( "EXPORT_NAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY EXPORT_PROPERTIES )
  if( prop )
      message( "EXPORT_PROPERTIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY FOLDER )
  if( prop )
      message( "FOLDER -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY Fortran_FORMAT )
  if( prop )
      message( "Fortran_FORMAT -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY Fortran_MODULE_DIRECTORY )
  if( prop )
      message( "Fortran_MODULE_DIRECTORY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY FRAMEWORK )
  if( prop )
      message( "FRAMEWORK -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY FRAMEWORK_VERSION )
  if( prop )
      message( "FRAMEWORK_VERSION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY GENERATOR_FILE_NAME )
  if( prop )
      message( "GENERATOR_FILE_NAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY GHS_INTEGRITY_APP )
  if( prop )
      message( "GHS_INTEGRITY_APP -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY GHS_NO_SOURCE_GROUP_FILE )
  if( prop )
      message( "GHS_NO_SOURCE_GROUP_FILE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY GNUtoMS )
  if( prop )
      message( "GNUtoMS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY HAS_CXX )
  if( prop )
      message( "HAS_CXX -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPLICIT_DEPENDS_INCLUDE_TRANSFORM )
  if( prop )
      message( "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_COMMON_LANGUAGE_RUNTIME )
  if( prop )
      message( "IMPORTED_COMMON_LANGUAGE_RUNTIME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_CONFIGURATIONS )
  if( prop )
      message( "IMPORTED_CONFIGURATIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_GLOBAL )
  if( prop )
      message( "IMPORTED_GLOBAL -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_IMPLIB_<CONFIG> )
  if( prop )
      message( "IMPORTED_IMPLIB_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_IMPLIB )
  if( prop )
      message( "IMPORTED_IMPLIB -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_LIBNAME_<CONFIG> )
  if( prop )
      message( "IMPORTED_LIBNAME_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_LIBNAME )
  if( prop )
      message( "IMPORTED_LIBNAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG> )
  if( prop )
      message( "IMPORTED_LINK_DEPENDENT_LIBRARIES_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_LINK_DEPENDENT_LIBRARIES )
  if( prop )
      message( "IMPORTED_LINK_DEPENDENT_LIBRARIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG> )
  if( prop )
      message( "IMPORTED_LINK_INTERFACE_LANGUAGES_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_LINK_INTERFACE_LANGUAGES )
  if( prop )
      message( "IMPORTED_LINK_INTERFACE_LANGUAGES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG> )
  if( prop )
      message( "IMPORTED_LINK_INTERFACE_LIBRARIES_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_LINK_INTERFACE_LIBRARIES )
  if( prop )
      message( "IMPORTED_LINK_INTERFACE_LIBRARIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG> )
  if( prop )
      message( "IMPORTED_LINK_INTERFACE_MULTIPLICITY_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_LINK_INTERFACE_MULTIPLICITY )
  if( prop )
      message( "IMPORTED_LINK_INTERFACE_MULTIPLICITY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_LOCATION_<CONFIG> )
  if( prop )
      message( "IMPORTED_LOCATION_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_LOCATION )
  if( prop )
      message( "IMPORTED_LOCATION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_NO_SONAME_<CONFIG> )
  if( prop )
      message( "IMPORTED_NO_SONAME_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_NO_SONAME )
  if( prop )
      message( "IMPORTED_NO_SONAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_OBJECTS_<CONFIG> )
  if( prop )
      message( "IMPORTED_OBJECTS_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_OBJECTS )
  if( prop )
      message( "IMPORTED_OBJECTS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED )
  if( prop )
      message( "IMPORTED -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_SONAME_<CONFIG> )
  if( prop )
      message( "IMPORTED_SONAME_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORTED_SONAME )
  if( prop )
      message( "IMPORTED_SONAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORT_PREFIX )
  if( prop )
      message( "IMPORT_PREFIX -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IMPORT_SUFFIX )
  if( prop )
      message( "IMPORT_SUFFIX -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INCLUDE_DIRECTORIES )
  if( prop )
      message( "INCLUDE_DIRECTORIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INSTALL_NAME_DIR )
  if( prop )
      message( "INSTALL_NAME_DIR -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INSTALL_RPATH )
  if( prop )
      message( "INSTALL_RPATH -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INSTALL_RPATH_USE_LINK_PATH )
  if( prop )
      message( "INSTALL_RPATH_USE_LINK_PATH -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERFACE_AUTOUIC_OPTIONS )
  if( prop )
      message( "INTERFACE_AUTOUIC_OPTIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERFACE_COMPILE_DEFINITIONS )
  if( prop )
      message( "INTERFACE_COMPILE_DEFINITIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERFACE_COMPILE_FEATURES )
  if( prop )
      message( "INTERFACE_COMPILE_FEATURES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERFACE_COMPILE_OPTIONS )
  if( prop )
      message( "INTERFACE_COMPILE_OPTIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERFACE_INCLUDE_DIRECTORIES )
  if( prop )
      message( "INTERFACE_INCLUDE_DIRECTORIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERFACE_LINK_DEPENDS )
  if( prop )
      message( "INTERFACE_LINK_DEPENDS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERFACE_LINK_DIRECTORIES )
  if( prop )
      message( "INTERFACE_LINK_DIRECTORIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERFACE_LINK_LIBRARIES )
  if( prop )
      message( "INTERFACE_LINK_LIBRARIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERFACE_LINK_OPTIONS )
  if( prop )
      message( "INTERFACE_LINK_OPTIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE )
  if( prop )
      message( "INTERFACE_POSITION_INDEPENDENT_CODE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERFACE_SOURCES )
  if( prop )
      message( "INTERFACE_SOURCES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERFACE_SYSTEM_INCLUDE_DIRECTORIES )
  if( prop )
      message( "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERPROCEDURAL_OPTIMIZATION_<CONFIG> )
  if( prop )
      message( "INTERPROCEDURAL_OPTIMIZATION_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY INTERPROCEDURAL_OPTIMIZATION )
  if( prop )
      message( "INTERPROCEDURAL_OPTIMIZATION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY IOS_INSTALL_COMBINED )
  if( prop )
      message( "IOS_INSTALL_COMBINED -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY JOB_POOL_COMPILE )
  if( prop )
      message( "JOB_POOL_COMPILE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY JOB_POOL_LINK )
  if( prop )
      message( "JOB_POOL_LINK -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LABELS )
  if( prop )
      message( "LABELS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY <LANG>_CLANG_TIDY )
  if( prop )
      message( "" ${pLANG -> rop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY <LANG>_COMPILER_LAUNCHER )
  if( prop )
      message( "" ${pLANG -> rop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY <LANG>_CPPCHECK )
  if( prop )
      message( "" ${pLANG -> rop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY <LANG>_CPPLINT )
  if( prop )
      message( "" ${pLANG -> rop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY <LANG>_INCLUDE_WHAT_YOU_USE )
  if( prop )
      message( "" ${pLANG -> rop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY <LANG>_VISIBILITY_PRESET )
  if( prop )
      message( "" ${pLANG -> rop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LIBRARY_OUTPUT_DIRECTORY_<CONFIG> )
  if( prop )
      message( "LIBRARY_OUTPUT_DIRECTORY_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LIBRARY_OUTPUT_DIRECTORY )
  if( prop )
      message( "LIBRARY_OUTPUT_DIRECTORY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LIBRARY_OUTPUT_NAME_<CONFIG> )
  if( prop )
      message( "LIBRARY_OUTPUT_NAME_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LIBRARY_OUTPUT_NAME )
  if( prop )
      message( "LIBRARY_OUTPUT_NAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_DEPENDS_NO_SHARED )
  if( prop )
      message( "LINK_DEPENDS_NO_SHARED -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_DEPENDS )
  if( prop )
      message( "LINK_DEPENDS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINKER_LANGUAGE )
  if( prop )
      message( "LINKER_LANGUAGE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_DIRECTORIES )
  if( prop )
      message( "LINK_DIRECTORIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_FLAGS_<CONFIG> )
  if( prop )
      message( "LINK_FLAGS_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_FLAGS )
  if( prop )
      message( "LINK_FLAGS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_INTERFACE_LIBRARIES_<CONFIG> )
  if( prop )
      message( "LINK_INTERFACE_LIBRARIES_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_INTERFACE_LIBRARIES )
  if( prop )
      message( "LINK_INTERFACE_LIBRARIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_INTERFACE_MULTIPLICITY_<CONFIG> )
  if( prop )
      message( "LINK_INTERFACE_MULTIPLICITY_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_INTERFACE_MULTIPLICITY )
  if( prop )
      message( "LINK_INTERFACE_MULTIPLICITY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_LIBRARIES )
  if( prop )
      message( "LINK_LIBRARIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_OPTIONS )
  if( prop )
      message( "LINK_OPTIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_SEARCH_END_STATIC )
  if( prop )
      message( "LINK_SEARCH_END_STATIC -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_SEARCH_START_STATIC )
  if( prop )
      message( "LINK_SEARCH_START_STATIC -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY LINK_WHAT_YOU_USE )
  if( prop )
      message( "LINK_WHAT_YOU_USE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY MACOSX_BUNDLE_INFO_PLIST )
  if( prop )
      message( "MACOSX_BUNDLE_INFO_PLIST -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY MACOSX_BUNDLE )
  if( prop )
      message( "MACOSX_BUNDLE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY MACOSX_FRAMEWORK_INFO_PLIST )
  if( prop )
      message( "MACOSX_FRAMEWORK_INFO_PLIST -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY MACOSX_RPATH )
  if( prop )
      message( "MACOSX_RPATH -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY MANUALLY_ADDED_DEPENDENCIES )
  if( prop )
      message( "MANUALLY_ADDED_DEPENDENCIES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY MSVC_RUNTIME_LIBRARY )
  if( prop )
      message( "MSVC_RUNTIME_LIBRARY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY NAME )
  if( prop )
      message( "NAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY NO_SONAME )
  if( prop )
      message( "NO_SONAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY NO_SYSTEM_FROM_IMPORTED )
  if( prop )
      message( "NO_SYSTEM_FROM_IMPORTED -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY OSX_ARCHITECTURES_<CONFIG> )
  if( prop )
      message( "OSX_ARCHITECTURES_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY OSX_ARCHITECTURES )
  if( prop )
      message( "OSX_ARCHITECTURES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY OUTPUT_NAME_<CONFIG> )
  if( prop )
      message( "OUTPUT_NAME_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY OUTPUT_NAME )
  if( prop )
      message( "OUTPUT_NAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY PDB_NAME_<CONFIG> )
  if( prop )
      message( "PDB_NAME_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY PDB_NAME )
  if( prop )
      message( "PDB_NAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY PDB_OUTPUT_DIRECTORY_<CONFIG> )
  if( prop )
      message( "PDB_OUTPUT_DIRECTORY_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY PDB_OUTPUT_DIRECTORY )
  if( prop )
      message( "PDB_OUTPUT_DIRECTORY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY POSITION_INDEPENDENT_CODE )
  if( prop )
      message( "POSITION_INDEPENDENT_CODE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY PREFIX )
  if( prop )
      message( "PREFIX -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY PRIVATE_HEADER )
  if( prop )
      message( "PRIVATE_HEADER -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY PROJECT_LABEL )
  if( prop )
      message( "PROJECT_LABEL -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY PUBLIC_HEADER )
  if( prop )
      message( "PUBLIC_HEADER -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY RESOURCE )
  if( prop )
      message( "RESOURCE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY RULE_LAUNCH_COMPILE )
  if( prop )
      message( "RULE_LAUNCH_COMPILE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY RULE_LAUNCH_CUSTOM )
  if( prop )
      message( "RULE_LAUNCH_CUSTOM -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY RULE_LAUNCH_LINK )
  if( prop )
      message( "RULE_LAUNCH_LINK -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY RUNTIME_OUTPUT_DIRECTORY_<CONFIG> )
  if( prop )
      message( "RUNTIME_OUTPUT_DIRECTORY_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY RUNTIME_OUTPUT_DIRECTORY )
  if( prop )
      message( "RUNTIME_OUTPUT_DIRECTORY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY RUNTIME_OUTPUT_NAME_<CONFIG> )
  if( prop )
      message( "RUNTIME_OUTPUT_NAME_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY RUNTIME_OUTPUT_NAME )
  if( prop )
      message( "RUNTIME_OUTPUT_NAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY SKIP_BUILD_RPATH )
  if( prop )
      message( "SKIP_BUILD_RPATH -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY SOURCE_DIR )
  if( prop )
      message( "SOURCE_DIR -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY SOURCES )
  if( prop )
      message( "SOURCES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY SOVERSION )
  if( prop )
      message( "SOVERSION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY STATIC_LIBRARY_FLAGS_<CONFIG> )
  if( prop )
      message( "STATIC_LIBRARY_FLAGS_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY STATIC_LIBRARY_FLAGS )
  if( prop )
      message( "STATIC_LIBRARY_FLAGS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY STATIC_LIBRARY_OPTIONS )
  if( prop )
      message( "STATIC_LIBRARY_OPTIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY SUFFIX )
  if( prop )
      message( "SUFFIX -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY Swift_DEPENDENCIES_FILE )
  if( prop )
      message( "Swift_DEPENDENCIES_FILE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY Swift_MODULE_DIRECTORY )
  if( prop )
      message( "Swift_MODULE_DIRECTORY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY Swift_MODULE_NAME )
  if( prop )
      message( "Swift_MODULE_NAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY TYPE )
  if( prop )
      message( "TYPE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VERSION )
  if( prop )
      message( "VERSION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VISIBILITY_INLINES_HIDDEN )
  if( prop )
      message( "VISIBILITY_INLINES_HIDDEN -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_CONFIGURATION_TYPE )
  if( prop )
      message( "VS_CONFIGURATION_TYPE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_DEBUGGER_COMMAND )
  if( prop )
      message( "VS_DEBUGGER_COMMAND -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_DEBUGGER_COMMAND_ARGUMENTS )
  if( prop )
      message( "VS_DEBUGGER_COMMAND_ARGUMENTS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_DEBUGGER_ENVIRONMENT )
  if( prop )
      message( "VS_DEBUGGER_ENVIRONMENT -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_DEBUGGER_WORKING_DIRECTORY )
  if( prop )
      message( "VS_DEBUGGER_WORKING_DIRECTORY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_DESKTOP_EXTENSIONS_VERSION )
  if( prop )
      message( "VS_DESKTOP_EXTENSIONS_VERSION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_DOTNET_REFERENCE_<refname> )
  if( prop )
      message( "VS_DOTNET_REFERENCE_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname> )
  if( prop )
      message( "VS_DOTNET_REFERENCEPROP_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_DOTNET_REFERENCES )
  if( prop )
      message( "VS_DOTNET_REFERENCES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_DOTNET_REFERENCES_COPY_LOCAL )
  if( prop )
      message( "VS_DOTNET_REFERENCES_COPY_LOCAL -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_DOTNET_TARGET_FRAMEWORK_VERSION )
  if( prop )
      message( "VS_DOTNET_TARGET_FRAMEWORK_VERSION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_GLOBAL_KEYWORD )
  if( prop )
      message( "VS_GLOBAL_KEYWORD -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_GLOBAL_PROJECT_TYPES )
  if( prop )
      message( "VS_GLOBAL_PROJECT_TYPES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_GLOBAL_ROOTNAMESPACE )
  if( prop )
      message( "VS_GLOBAL_ROOTNAMESPACE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_GLOBAL_<variable> )
  if( prop )
      message( "VS_GLOBAL_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_IOT_EXTENSIONS_VERSION )
  if( prop )
      message( "VS_IOT_EXTENSIONS_VERSION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_IOT_STARTUP_TASK )
  if( prop )
      message( "VS_IOT_STARTUP_TASK -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_JUST_MY_CODE_DEBUGGING )
  if( prop )
      message( "VS_JUST_MY_CODE_DEBUGGING -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_KEYWORD )
  if( prop )
      message( "VS_KEYWORD -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_MOBILE_EXTENSIONS_VERSION )
  if( prop )
      message( "VS_MOBILE_EXTENSIONS_VERSION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_NO_SOLUTION_DEPLOY )
  if( prop )
      message( "VS_NO_SOLUTION_DEPLOY -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_PACKAGE_REFERENCES )
  if( prop )
      message( "VS_PACKAGE_REFERENCES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_PROJECT_IMPORT )
  if( prop )
      message( "VS_PROJECT_IMPORT -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_SCC_AUXPATH )
  if( prop )
      message( "VS_SCC_AUXPATH -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_SCC_LOCALPATH )
  if( prop )
      message( "VS_SCC_LOCALPATH -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_SCC_PROJECTNAME )
  if( prop )
      message( "VS_SCC_PROJECTNAME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_SCC_PROVIDER )
  if( prop )
      message( "VS_SCC_PROVIDER -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_SDK_REFERENCES )
  if( prop )
      message( "VS_SDK_REFERENCES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_USER_PROPS )
  if( prop )
      message( "VS_USER_PROPS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION )
  if( prop )
      message( "VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_WINRT_COMPONENT )
  if( prop )
      message( "VS_WINRT_COMPONENT -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_WINRT_EXTENSIONS )
  if( prop )
      message( "VS_WINRT_EXTENSIONS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY VS_WINRT_REFERENCES )
  if( prop )
      message( "VS_WINRT_REFERENCES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY WIN32_EXECUTABLE )
  if( prop )
      message( "WIN32_EXECUTABLE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY WINDOWS_EXPORT_ALL_SYMBOLS )
  if( prop )
      message( "WINDOWS_EXPORT_ALL_SYMBOLS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_ATTRIBUTE_<an-attribute> )
  if( prop )
      message( "XCODE_ATTRIBUTE_ -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_EXPLICIT_FILE_TYPE )
  if( prop )
      message( "XCODE_EXPLICIT_FILE_TYPE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_GENERATE_SCHEME )
  if( prop )
      message( "XCODE_GENERATE_SCHEME -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_PRODUCT_TYPE )
  if( prop )
      message( "XCODE_PRODUCT_TYPE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_ADDRESS_SANITIZER )
  if( prop )
      message( "XCODE_SCHEME_ADDRESS_SANITIZER -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN )
  if( prop )
      message( "XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_ARGUMENTS )
  if( prop )
      message( "XCODE_SCHEME_ARGUMENTS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_DEBUG_AS_ROOT )
  if( prop )
      message( "XCODE_SCHEME_DEBUG_AS_ROOT -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER )
  if( prop )
      message( "XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS )
  if( prop )
      message( "XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE )
  if( prop )
      message( "XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_ENVIRONMENT )
  if( prop )
      message( "XCODE_SCHEME_ENVIRONMENT -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_EXECUTABLE )
  if( prop )
      message( "XCODE_SCHEME_EXECUTABLE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_GUARD_MALLOC )
  if( prop )
      message( "XCODE_SCHEME_GUARD_MALLOC -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP )
  if( prop )
      message( "XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_MALLOC_GUARD_EDGES )
  if( prop )
      message( "XCODE_SCHEME_MALLOC_GUARD_EDGES -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_MALLOC_SCRIBBLE )
  if( prop )
      message( "XCODE_SCHEME_MALLOC_SCRIBBLE -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_MALLOC_STACK )
  if( prop )
      message( "XCODE_SCHEME_MALLOC_STACK -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_THREAD_SANITIZER )
  if( prop )
      message( "XCODE_SCHEME_THREAD_SANITIZER -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_THREAD_SANITIZER_STOP )
  if( prop )
      message( "XCODE_SCHEME_THREAD_SANITIZER_STOP -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER )
  if( prop )
      message( "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP )
  if( prop )
      message( "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCODE_SCHEME_ZOMBIE_OBJECTS )
  if( prop )
      message( "XCODE_SCHEME_ZOMBIE_OBJECTS -> " ${prop} )
  endif( prop )
  get_property( prop TARGET exe_c PROPERTY XCTEST )
  if( prop )
      message( "XCTEST -> " ${prop} )
  endif( prop )

endfunction()